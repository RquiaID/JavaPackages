Methods in Java:
   Is just a collection of java statements (a statement is a single instruction
   that tells the program to perform a specific action. A statement can be a declaration,
   an assignment, a method call, a control flow construct, or any other type of instruction that the Java programming
   language supports). and blocks of code like if else loop printlns etc.

  Why should we learn about methods:
  1) It allows us to simplify  large code as we can divide the logic into smaller parts by creating methods for them
   build those methods one by one and later on combine them to build the complete application.
  2) Methods allow us to reuse code.
  3) Methods allow us to be flexible.

How can we create Methods?
  There are two types built-in and user defined.

Build-in methods?
   The methods which are designed by Java developers for example the println() ,nextInt() method in the scanner class
  length() present in  String class they are all built-in methods.
User Defined Methods:
   they are methods that we write.
Methods which return something when called and others are methods which do not return anything when called.

int add(int a, int b){
return a+b;
}
int => this thing is called return type of a method
add => is called name of the method
(int a, int b) => parameters of the method or the input to the method
{ => this is called the body of the method
}

Rules:

=> return type and the values that we are returning from a method should match.

=> we can only assign methods to variables of the same type.

=============================================================================
There are three types of variables with respect to their scope

local variables:
    they have local scope can be accessed only inside block of code
   if a variable is created inside a block of code like a method, loop, if condition etc anything that is inside curly
   brackets they are all called local variables.

   Upside:
   Local variables occupy the memory for the shortest period of time.You should always try to write
   code with the help of local variables. // only created when you need them and destroyed once you execute a block of code
   with the help of local variables.

   Downside:
   They can't be accessed outside the block in which they are created.They have very limited scope.


instance variables:

 which are created inside a class outside of methods are called instance variables.

 Upside:
 we can use them in all the instance methods of that class. their scope is larger than local variables.

  Downside:
  They stay longer in the memory as compared to local variables.


 Static Variables:
 All the variables which are outside of methods and have the static keyword are called static variables.

 Upside:
   static variable only occupy one memory location from the RAM even though we create 1000 objects from that class.
   They can be used in any block of code inside the class they can be accessed in any methods of a class they can be also
   be accessed with the help of any object of that class. They have the most wide scope.

 Downside:
    They are loaded into the memory when a class is loaded even though you do not use them.

    ============================================================================================
    // Access modifiers can be used to access methods, variables and classes.


 Access modifiers?

       Access modifiers are some keywords in java that we can use to control the access of variables, methods and classes
       There are 4 access levels private, protected, default( this is not a keyword actually ), and public
       And there are 3 keywords that we use to control this access for example private protected and public.

 Private:

   if we write keyword with a variable or method or a class. we can access that variable or method or class within the same class.


 default:
  default is not a keyword. When we don't write any access modifiers with variables or methods or classes default access is applied
  automatically by java, which means these variables methods or classes can be accessed inside any other class which is present inside
  the same package.

Public:

   public is a keyword. When written with any variable or method or class it means any class







