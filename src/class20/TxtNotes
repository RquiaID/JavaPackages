 This keyword refers to the current class/object/instance

 this can be used to access current class instance variables and methods for methods its by default either we use it or not.

 this() is used with constructor to call the current class constructor ex:

 Teacher(String name, int teacherId){
         this.name=name;// purple points to instance variables
         this.TeacherId=teacherId;

     }
     Teacher(String name,int teacherId,String subject){
         // I can make a call by using this
         this(name,teacherId);   // a call to another constructor always needs to be in the first line
         this.subject=subject;// I write down this because I didn't initialize it in the first constructor.

     Inheritance:

 What it is ?
 is a process when subclass acquire properties and behaviors from the super class another name to sub is derived class

 Why to use it?
 for code reusability, readability, eliminate code redundancy

 How to implement? using extends keyword

 class Parent(){

 }
 class Child extends Parent{

 }

 Inheritance types:

 Single- 1 child 1 parent

 Multilevel- grandparent->parent->child

 hierarchical - 1 parent multiple children

 Can a child class have multiple Parents?
   =>using class concept the answer is no. multiple inheritance is not supported by class concept but it is going to be possible

Access Modifiers:

4types
from less restrictive to the most

public->protected->default->private->

Private members(variables and methods) DO NOT PARTICIPATE in the inheritance

 Through inheritance protected members become available in different package

 Variables syntax

     Optional            Optional      MUST       MUST
  Access modifier    nonAccess modifier     datatype   name;
    public

 Methods syntax
     Optional           Optional         MUST       MUST
 access modifiers  nonAccess modifier   returnType name(){}  =>>> METHOD is a block of code
                      static

 static keyword is non access modifier, and it is optional which means we can create our method or variable without, it
 does not define visibility.
 Access modifier is also optional to use

 final has nothing to do with visibility and access




